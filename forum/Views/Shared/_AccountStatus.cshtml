@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="account-status">
    @* Check if user is signed in and if the user exists *@
    @if (SignInManager.IsSignedIn(User) && UserManager.GetUserAsync(User).Result != null)
    {
        <li>
            <a id="manage-link" class="nav-btn-text" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
        </li>
        <li class="img-container">
            @if (UserManager.GetUserAsync(User).Result.ProfilePicture != null)
            {
                <img style="width:40px;height:40px; object-fit:cover; border-radius:30px" src="data:image/*;base64,@(Convert.ToBase64String(UserManager.GetUserAsync(User).Result.ProfilePicture))" alt="Picture of @UserManager.GetUserName(User)">
            }
            else
            {
                <img src="@Url.Identicon(UserManager.GetUserName(User), 40)" alt="Identicon of @UserManager.GetUserName(User)" width="40" height="40"/>
            }
        </li>
    }
    else
    {
        <li>
            <a id="register-link" class="nav-btn-text" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li>
            <a id="login-link" class="nav-btn-text" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>